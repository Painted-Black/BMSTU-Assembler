| метка LABEL тип		| определяет метку и задает ее тип: BYTE, WORD, DWORD, FWORD, QWORD, TBYTE, NEAR, FAR									|
| метка EQU выражение	| присваивает метке значение, которое определяется как результат целочисленного выражения в первой части				|
| метка = выражение		| эквивалента EQU, но определяемая ею метка может принимать только целочисленные значения и может быть переопределена	|
-------------------------------------------------------------------------------------------------------------------------------------------------
| ДИРЕКТИВЫ РАСПРЕДЕЛЕНИЯ ПАМЯТИ			|
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| имя_переменной d* значение						| d* = DB, DW, DD, DF, DQ, DT; значение - одно/неск. чисел, строк, символов, операторов ? и DUP, разделенных запятыми	|
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| имя struc											| поля - любой набор псевдокоманд определения переменных или  структур, устанавливает, но не инициализирует СД		|
|     поля											| Для ее создания в памяти: метка имя <значения> 																	|
| имя ends 											| Для чтения или записи в эл-т структуры используется оператор .													|
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| имя_сегмента [segment] [readonly] [выравн.] [тип] [разряд] 'класс'	| Описание сегмента программы	|
| имя_сегмента ends														|								|
---------------------------------------------------------------------------------------------------------
| имя_группы group имя_сегмента...					| Объединение сегментов в группы					|
-------------------------------------------------------------------------------------------------------------------------------------------------------------
| ASSUME регистр:связь,...							| Указывает ассемблеру, с каким сегментом или группой сегментов связан тот или иной сегментный регистр	|
-------------------------------------------------------------------------------------------------------------------------------------------------------------
| МОДЕЛИ ПАМЯТИ								|
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| .model модель[, язык][, модификатор]		| модель: TINY,SMALL,COMPACT,MEDIUM,LARGE(HUGE),FLAT; язык: C,PASCAL,FORTRAN,SYSCALL,STDCALL, модификатор: NEARSTACK,FARSTACK	|
| .CODE имя_сегмента						| Описывает основной сегмент кода																								|
| .stact [размер]							| Описывает сегмент стека, = STACK segment para public 'stack'																	|
| .data										| Описывает обычный сегмент данных, = _DATA segment word public 'DATA															|
| .data?									| Описывает сегмент неинициализированных данных, = _BSS segment word public 'BSS'												|
| .const									| Описывает сегмент неизменяемых данных, = CONST segment word public 'CONST'													|
| .fardata имя_сегмента						| Сегмент дальних данных, = имя_сегмента segment para private 'FAR_DATA'														|
| .fardat? имя_сегмента						| Сегмент дальних неинициализированных данных, = имя_сегмента segment para private 'FAR_BSS'									|
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| Порядок загрузки сегментов			|
-----------------------------------------------------------------------------------------------------------------
| .alpha			| Устанавливает алфавитный порядок загрузки сегментов										|
| .dosseg/dosseg	| Устанавливает порядок загрузки сегментов, существующий в MS DOS							|
| .seq				| Устанавливает загрузку сегментов в том порядке, в котором они описаны в тексте программы	|
-----------------------------------------------------------------------------------------------------------------
| ПРОЦЕДУРЫ								|
-------------------------------------------------------------------------------------------------------------
| метка proc [тип] [язык] [USES регистры]	| тип: NEAR,FAR													|
|		ret									| язык: C,PASCAL,FORTRAN,SYSCALL,STDCALL						|
| метка endp								| USES - список регистров, значения кот. изменяет процедура		|
-------------------------------------------------------------------------------------------------------------
| КОНЕЦ ПРОГРАММЫ		|
-----------------------------------------------------
| end start_label		| Завершение программы		|
-----------------------------------------------------
| ДИРЕКТИВЫ ЗАДАНИЯ НАБОРА ДОПУСТИМЫХ КОМАНД		|
-----------------------------------------------------
| .8086			| По умолчанию. Только команды 8086	|
| .186			| Команды 80186						|
| .286 и .286c	| Непривилегированные команды 80286	|
| .286p			| Команды 80286						|
| .386 и .386c	| Непривилегированные команды 80386	|
| .386p			| Команды 80386						|
| .486 и .486c	| Непривилегированные команды 80486	|
| .486p			| Команды 80486						|
| .586 и .586c	| Непривилегированные команды P5	|
| .486p			| Команды P5						|
| .686			| Непривилегированные команды P6	|
| .686p			| Команды P6						|
| .8087			| Команды NPX 8087					|
| .287			| Команды NPX 80287					|
| .387			| Команды NPX 80387					|
| .487			| Команды NPX 80486					|
| .587			| Команды NPX 80586					|
| .MMX			| Команды IA MM						|
| .K3D			| Команды AMD 3D					|
-----------------------------------------------------
| УПРАВЛЕНИЕ ПРОГРАММНЫМ СЧЕТЧИКОМ					|
-------------------------------------------------------------------------------------------------
| org выражение		| Устанавливает значение программного счетчика								|
| even				| Делает текущее значение счетчика кратным двум								|
| align значение	| Округляет значение программного счетчика до кратного указанному значению	|
-------------------------------------------------------------------------------------------------
| ГЛОБАЛЬНЫЕ ОБЪЯВЛЕНИЯ				|
-----------------------------------------------------------------------------------------------------------------
| public [язык] метка... 			| Метка становится доступной для других модулей программы					|
| сomm [расст] [язык] метка: тип...	| Описывает общую переменную, доступную из всех модулей						|
| extrn [язык] метка: тип...		| Описывает метку, определенную в другом модулей (тип ABS для меток EQU		|
| global [язык] метка: тип...		| Как public и extrn одновременно											|
-----------------------------------------------------------------------------------------------------------------
| УСЛОВНОЕ АССЕМБЛИРОВАНИЕ			|
-----------------------------------------------------------------------------------------------------------------
| if выражение									|																|
| 	...											|																|
|	[elseif]									|																|
|	...											|																|
|	[else]										|																|
|	...											|																|
| endif											|																|
|												|																|
| if1/elseif1									| Если ассемблер выполняет первый проход ассемблирования		|
| f2/|elseif2									| Если ассемблер выполняет второй проход ассемблирования		|
| ife выражение/elseife выражение				| Если выражение равно нулю (ложно)								|
| ifdef метка/elseifdef метка					| Если метка определена											|
| ifndef метка/elseifndef метка					| Если метка не определена										|
| ifb<аргумент>/elseifb<аргумент>				| Если значение аргумента - не пробел							|
| ifdif<арг1>,<арг2>/elseifdif<арг1>,<арг2>		| Если аргументы отличаются										|
| ifdifш<арг1>,<арг2>/elseifdifш<арг1>,<арг2>	| Если аргументы отличаются										|
| ifidn<арг1>,<арг2>/elseifidn<арг1>,<арг2>		| Если аргументы одинаковы										|
| ifidni<арг1>,<арг2>/elseifidni<арг1>,<арг2>	| Если аргументы не одинаковы									|
-----------------------------------------------------------------------------------------------------------------
| УСТЛОВНАЯ ГЕНЕРАЦИЯ ОШИБОК						|
-----------------------------------------------------------------------------
| .err						| Прекращение работы с сообщением об ошибке		|
| .err1						| Ошибка при первом проходе ассемблирования		|
| .err2						| Ошибка при втором проходе ассемблирования		|
| .erre	выражение			| Ошибка, если выражение равно нулю				|
| .errnz выражение			| Ошибка, если выражение не равно нулю			|
| .errdef метка				| Ошибка, если метка определена					|
| .errndef метка			| Ошибка, если метка не определена				|
| .errb	<аргумент>			| Ошибка, если аргумент пуст					|
| .errnb					| Ошибка, если аргумент не пуст					|
| .errdif <арг1>,<арг2>		| Ошибка, если аргументы различны				|
| .errdifi <арг1>,<арг2>	| Ошибка, если аргументы отличаются				|
| .erridn <арг1>,<арг2>		| Ошибка, если аргументы совпадают				|
| .erridni	<арг1>,<арг2>	| Ошибка, если аргументы совпадают				|
-----------------------------------------------------------------------------
| ВЫРАЖЕНИЯ					|
---------------------------------------------------------------------------------------------------------------------------------
| message1 equ <foobar>		| Часть выражения, заключенная в угловые скобки, не вычисляется, а применяется как строка символов	|
| mov al, 2*(3+4) 			| Часть выражения, заключенная в круглые скобки, вычисляется в первую очередь						|
| +,-,*,/,MOD 				| Выполняют соответствующие арифметические действия													|
| AND,NOT,OR,XOR,SHL,SHR	| Выполняют соответствующие логические действия														|
| EQ,GE,GT,LE,LT,NE			| Операторы сравнения																				|
---------------------------------------------------------------------------------------------------------------------------------
| ОПЕРАТОРЫ АДРЕСАЦИИ		|
---------------------------------------------------------
| SEG выражение			| Сегментный адрес				|
| OFFSET выражение		| Смещение						|
| THIS тип				| Текущий адрес					|
| тип PTR выражение		| Переопределение типа			|
| LARGE выражение		| 32-битное смещение			|
| SMALL выражение		| 16-битное смещение			|
| SHORT выражение		| 8-битное смещение				|
| .						| Ссылка на элемент структуры	|
| :						| Переопределение сегмента		|
| []					| Косвенная адресация			|
| ?						| Неинициализированное значение	|
| число DUP(значение)	| Повторяющееся значение		|
| LENGTH метка			| Число элеметнов данных		|
---------------------------------------------------------
| МАКРООПРЕДЕЛЕНИЯ										|
-----------------------------------------------------------------------------------------------------------------------------	
| MACRO							| Начало макроса																			|
| ENDM							| Конец макроса																				|
| REPT							| Простейший блок повторений																|
| IRP параметр,<зн1, зн2...>	| Блок повторений с параметрами,вызывается столько раз,сколько значений в списке			|
| IRPC параметр, строка			| Блок повторений с параметрами,вызывается столько раз,сколько символов содержит строка		|
-----------------------------------------------------------------------------------------------------------------------------
| МАКРООПЕРАТОРЫ				|
-----------------------------------------------------------------------------------------------------------------------------
| &					| Для того, что чтобы параметр, переданный в качестве операнда макроопределению или блоку повторений, 	|
|					| заменялся значением до обработки ассемблером															|
| <>				| Весь текст, заключенный в эти скобки, рассматривается как текстовая строка							|
| !					| Аналогично <>, но только на один следующий символ														|
| %					| Указывает, что находящийся за ним текст является выражением и должен быть вычислен					|
| ;;				| Начало макрокомментария																				|
| EXITM				| Преждевременный выход из макроопределения или блока повторений										|
| LOCAL метка...	| Перечисляет метки, которые будут применяться внутри макроопределения									|
| PURGE имя_макроса	| Отменяет определенный ранее макроса																	|
-----------------------------------------------------------------------------------------------------------------------------
| УПРАВЛЕНИЕ ФАЙЛАМИ			|
-------------------------------------------------------------------------------------------------------------------------
| INCLUDE имя_файла				| Вставляет в текст программы текст файла												|
| INCLUDELIB имя_файла			| Указывает компоновщику имя дополнительной библиотеки или объектного файла, который 	|
|								| потребуется при составлении данной программы											|
-------------------------------------------------------------------------------------------------------------------------
| УПРАВЛЕНИЕ ЛИСТИНГОМ			|
-----------------------------------------------------------------------------------------
| TITLE текст			| Определяют заголовок листинга									|
| SUBTTL текст			| Определяет подзаголовок лиистинга								|
| PAGE высота, ширина	| Устанавливает размеры страниц листинга						|
| PAGE					| Начинает новую страницу										|
| PAGE+					| Начинает новую секцию											|
| NAME текст			| Определяет имя модуля подпрограммы							|
| .XLIST				| Отменить выдачу листинга										|
| .LIST					| Разрешить выдачу листинга										|
| .SALL					| Запретить листинг макроопределений							|
| .SFCOND				| Запретить листинг неассемблированных условных блоков			|
| .LFCOND				| Разрешить листинг неассемблированных условных блоков			|
| .TFCOND				| Изменить режим листинга условных блоков на противоположный	|
| .CREF					| Разрешить листинг перекрестных ссылок							|
| .XCREF				| Запретить листинг перекрестных ссылок							|
-----------------------------------------------------------------------------------------
| КОММЕНТАРИИ											|
---------------------------------------------------------
| COMMENT @				| Большие блоки комментариев	|
| любой текст			|								|
| @						|								|
---------------------------------------------------------